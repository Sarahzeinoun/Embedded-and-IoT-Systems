/*
  Rui Santos
  Complete project details at:
   - ESP32: https://RandomNerdTutorials.com/esp32-send-email-smtp-server-arduino-ide/
   - ESP8266: https://RandomNerdTutorials.com/esp8266-nodemcu-send-email-smtp-server-arduino/
 
  Parts of this code were added and altered by me, Sarah Zeinoun, to provide the functions needed for this project.
  The goals is for constant monitoring of values of the moisture and the light
  In case any fall into the insufficient categories, a corresponding email should be sent.
  
  Moisture values:
  <900: dry, corresponding email: Urgent! Water your plant!
  >900, <2200: moist, corresponding email: Pay attention! Your plant will soon need water!
  
  Light values:
  <2700: insufficient light, corresponding email: Attention ! Your plant needs more light!
  
*/

#include <Arduino.h>
#if defined(ESP32)
  #include <WiFi.h>
#elif defined(ESP8266)
  #include <ESP8266WiFi.h>
#endif
#include <ESP_Mail_Client.h>

#define WIFI_SSID "wifi id"
#define WIFI_PASSWORD "wifi password"

#define SMTP_HOST "smtp.gmail.com"
#define SMTP_PORT 465

/* The sign in credentials */
#define AUTHOR_EMAIL "sender mail"
#define AUTHOR_PASSWORD "created app password"

/* Recipient's email*/
#define RECIPIENT_EMAIL "personal mail"

/* The SMTP Session object used for Email sending */
SMTPSession smtp;

/* Callback function to get the Email sending status */
void smtpCallback(SMTP_Status status);

/* define the input port to which the moisture sensor is connected to*/
const int moistureSensorPin = 25;

/* define the variable used to stored the misture sensor value */ 
int moistureValue=0;

/* define the input port to which the light sensor is connected to*/
const int lightSensorPin = 34;

/* define the variable used to stored the misture sensor value */ 
int lightValue=0;

String htmlMsg;

void setup(){
  Serial.begin(115200);
  delay(10000);
}
  
void loop(){
  // The following code will read the input from the moisture sensor
  Serial.print("Moisture sensor: ");
  moistureValue = analogRead(moistureSensorPin);
  Serial.print(moistureValue);
  Serial.println();
  
  #if (moistureValue<900) 
    htmlMsg = "<div style=\"color:#2f4468;\"><h1>Urgent! Water your plant! </h1><p>- Sent from ESP board</p></div>";
  #elif (moistureValue<2200)
    htmlMsg = "<div style=\"color:#2f4468;\"><h1>Pay attention! Your plant will soon need water! </h1><p>- Sent from ESP board</p></div>";
  #else
    delay(5000); 
    // The following code will read the input from the light sensor
    Serial.print("Light sensor: ");
    lightValue = analogRead(lightSensorPin);
    Serial.print(lightValue);
    Serial.println();
    #if (lightValue<2700)
      htmlMsg = "<div style=\"color:#2f4468;\"><h1>Attention ! Your plant needs more light! </h1><p>- Sent from ESP board</p></div>";
    #endif
    delay(5000); 
  #endif
    
  Serial.println();
  Serial.print("Connecting to AP");
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  while (WiFi.status() != WL_CONNECTED){
    Serial.print(".");
    delay(2000);
  }
  Serial.println("");
  Serial.println("WiFi connected.");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
  Serial.println();

  /** Enable the debug via Serial port
   * none debug or 0
   * basic debug or 1
  */
  smtp.debug(1);

  /* Set the callback function to get the sending results */
  smtp.callback(smtpCallback);

  /* Declare the session config data */
  ESP_Mail_Session session;

  /* Set the session config */
  session.server.host_name = SMTP_HOST;
  session.server.port = SMTP_PORT;
  session.login.email = AUTHOR_EMAIL;
  session.login.password = AUTHOR_PASSWORD;
  session.login.user_domain = "";

  /* Declare the message class */
  SMTP_Message message;

  /* Set the message headers */
  message.sender.name = "ESP32";
  message.sender.email = AUTHOR_EMAIL;
  message.subject = "ESP Test Email";
  message.addRecipient("Sarah", RECIPIENT_EMAIL);

  /*Send HTML message*/
  message.html.content = htmlMsg.c_str();
  message.html.content = htmlMsg.c_str();
  message.text.charSet = "us-ascii";
  message.html.transfer_encoding = Content_Transfer_Encoding::enc_7bit;

  /*
  //Send raw text message
  String textMsg = "Hello World! - Sent from ESP board";
  message.text.content = textMsg.c_str();
  message.text.charSet = "us-ascii";
  message.text.transfer_encoding = Content_Transfer_Encoding::enc_7bit;
  
  message.priority = esp_mail_smtp_priority::esp_mail_smtp_priority_low;
  message.response.notify = esp_mail_smtp_notify_success | esp_mail_smtp_notify_failure | esp_mail_smtp_notify_delay;*/

  /* Set the custom message header */
  //message.addHeader("Message-ID: <abcde.fghij@gmail.com>");

  /* Connect to server with the session config */
  if (!smtp.connect(&session))
    return;

  /* Start sending Email and close the session */
  if (!MailClient.sendMail(&smtp, &message))
    Serial.println("Error sending Email, " + smtp.errorReason());
}


/* Callback function to get the Email sending status */
void smtpCallback(SMTP_Status status){
  /* Print the current status */
  Serial.println(status.info());

  /* Print the sending result */
  if (status.success()){
    Serial.println("----------------");
    ESP_MAIL_PRINTF("Message sent success: %d\n", status.completedCount());
    ESP_MAIL_PRINTF("Message sent failled: %d\n", status.failedCount());
    Serial.println("----------------\n");
    struct tm dt;

    for (size_t i = 0; i < smtp.sendingResult.size(); i++){
      /* Get the result item */
      SMTP_Result result = smtp.sendingResult.getItem(i);
      time_t ts = (time_t)result.timestamp;
      localtime_r(&ts, &dt);

      ESP_MAIL_PRINTF("Message No: %d\n", i + 1);
      ESP_MAIL_PRINTF("Status: %s\n", result.completed ? "success" : "failed");
      ESP_MAIL_PRINTF("Date/Time: %d/%d/%d %d:%d:%d\n", dt.tm_year + 1900, dt.tm_mon + 1, dt.tm_mday, dt.tm_hour, dt.tm_min, dt.tm_sec);
      ESP_MAIL_PRINTF("Recipient: %s\n", result.recipients);
      ESP_MAIL_PRINTF("Subject: %s\n", result.subject);
    }
    Serial.println("----------------\n");
  }
 
}
