#include <Arduino.h>
#if defined(ESP32)
  #include <WiFi.h>
#elif defined(ESP8266)
  #include <ESP8266WiFi.h>
#endif
#include <ESP_Mail_Client.h>

#define WIFI_SSID "wifi_id"
#define WIFI_PASSWORD "wifi_password"

#define SMTP_HOST "smtp.gmail.com"
#define SMTP_PORT 465

/* The sign in credentials */
#define AUTHOR_EMAIL "sender_email"
#define AUTHOR_PASSWORD "email_password"

/* Recipient's email*/
#define RECIPIENT_EMAIL "recipient_email"

/* The SMTP Session object used for Email sending */
SMTPSession smtp;

/* Callback function to get the Email sending status */
void smtpCallback(SMTP_Status status);

/* define the input port to which the moisture sensor is connected to*/
//const int moistureSensorPin = 25;

/* define the input port to which the light sensor is connected to*/
//const int lightSensorPin = 34;

const int moisture_threshold = 900;
const int light_threshold = 2700;

/* Declare the session config data */
ESP_Mail_Session session;

/* Declare the message class */
SMTP_Message message;

String htmlMsg;

void setup(){
  Serial.begin(115200);
  Serial.println();
  Serial.print("Connecting to AP");
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  while (WiFi.status() != WL_CONNECTED){
    Serial.print(".");
    delay(200);
  }
  Serial.println("");

  Serial.println("WiFi connected.");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
  Serial.println();

  /** Enable the debug via Serial port
   * none debug or 0
   * basic debug or 1
  */
  smtp.debug(1);

  /* Set the callback function to get the sending results */
  smtp.callback(smtpCallback);

  /* Set the session config */
  session.server.host_name = SMTP_HOST;
  session.server.port = SMTP_PORT;
  session.login.email = AUTHOR_EMAIL;
  session.login.password = AUTHOR_PASSWORD;
  session.login.user_domain = "";

  /* Set the message headers */
  message.sender.name = "ESP32";
  message.sender.email = AUTHOR_EMAIL;
  message.addRecipient("Sarah", RECIPIENT_EMAIL);
}

void loop() {
   int moisture = analogRead(A1);
   if (moisture > moisture_threshold){
    Serial.print("Moisture sensor: ");
    Serial.print(moisture);
   }
   else {
    message.subject = "Moisture Alert";
    htmlMsg = "<div style=\"color:#2f4468;\"><h1>Your plant needs watering!</h1><p>- Sent from ESP board</p></div>";
    
    /*Send HTML message*/
    message.html.content = htmlMsg.c_str();
    message.html.content = htmlMsg.c_str();
    message.text.charSet = "us-ascii";
    message.html.transfer_encoding = Content_Transfer_Encoding::enc_7bit;
  
    /* Connect to server with the session config */
    if (!smtp.connect(&session))
    return;

   /* Start sending Email and close the session */
   if (!MailClient.sendMail(&smtp, &message))
    Serial.println("Error sending Email, " + smtp.errorReason());
    Serial.print(moisture);
    message.subject = "";
    htmlMsg = "";
    delay(500);
   }
   delay(500);

   int light = analogRead(A2);
   if (light > light_threshold) {
    Serial.print("Light sensor: ");
    Serial.print(light);
   }
   else{
     message.subject = "Light Alert";
     htmlMsg = "<div style=\"color:#2f4468;\"><h1>Your plant needs more light!</h1><p>- Sent from ESP board</p></div>";
       /*Send HTML message*/
    message.html.content = htmlMsg.c_str();
    message.html.content = htmlMsg.c_str();
    message.text.charSet = "us-ascii";
    message.html.transfer_encoding = Content_Transfer_Encoding::enc_7bit;
  
     /* Connect to server with the session config */
    if (!smtp.connect(&session))
    return;

   /* Start sending Email and close the session */
   if (!MailClient.sendMail(&smtp, &message))
    Serial.println("Error sending Email, " + smtp.errorReason());
    Serial.print(light);
    message.subject = "";
    htmlMsg = "";
    delay(500);
   }
   delay(1000);
}

/* Callback function to get the Email sending status */
void smtpCallback(SMTP_Status status){
  /* Print the current status */
  Serial.println(status.info());

  /* Print the sending result */
  if (status.success()){
    Serial.println("----------------");
    ESP_MAIL_PRINTF("Message sent success: %d\n", status.completedCount());
    ESP_MAIL_PRINTF("Message sent failled: %d\n", status.failedCount());
    Serial.println("----------------\n");
    struct tm dt;

    for (size_t i = 0; i < smtp.sendingResult.size(); i++){
      /* Get the result item */
      SMTP_Result result = smtp.sendingResult.getItem(i);
      time_t ts = (time_t)result.timestamp;
      localtime_r(&ts, &dt);

      ESP_MAIL_PRINTF("Message No: %d\n", i + 1);
      ESP_MAIL_PRINTF("Status: %s\n", result.completed ? "success" : "failed");
      ESP_MAIL_PRINTF("Date/Time: %d/%d/%d %d:%d:%d\n", dt.tm_year + 1900, dt.tm_mon + 1, dt.tm_mday, dt.tm_hour, dt.tm_min, dt.tm_sec);
      ESP_MAIL_PRINTF("Recipient: %s\n", result.recipients);
      ESP_MAIL_PRINTF("Subject: %s\n", result.subject);
    }
    Serial.println("----------------\n");
  }
}
